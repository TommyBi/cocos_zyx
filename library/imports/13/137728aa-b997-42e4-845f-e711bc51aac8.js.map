{"version":3,"sources":["assets/script/merge/dataModule/ZyxGameModule.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA,mDAA+E;AAC/E,6CAAwC;AACxC,2CAAsC;AACtC,6CAA4C;AAE5C;IAA2C,iCAAU;IAkCjD;QAAA,YACI,iBAAO,SACV;QAlCD,aAAa;QACb,cAAQ,GAAiB,IAAI,CAAC;QAE9B,+CAA+C;QAC/C,cAAQ,GAAU;YACd,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACxF,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACxF,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACxF,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACxF,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACxF,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACxF,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,E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C,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACxF,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACxF,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACxF,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACxF,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACxF,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACxF,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;YACxF,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;SAC3F,CAAC;QACF,IAAI,CAAC,WAAW,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","file":"","sourceRoot":"/","sourcesContent":["import { gridContentType, gridSize, typeGameInfo } from '../define/TypeDefine';\nimport NewUtils from '../util/NewUtils';\nimport DataModule from './DataModule';\nimport { orderModule } from './OrderModule';\n\nexport default class ZyxGameModule extends DataModule {\n\n    // 游戏进行中的资源数据\n    gameInfo: typeGameInfo = null;\n\n    // 游戏进行中的棋盘数据 [gridSize, contentType, uniqueID]\n    gridInfo: any[] = [\n        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],\n        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],\n        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],\n        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],\n        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],\n        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],\n        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],\n        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],\n        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],\n        [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],\n    ];\n\n    // 操作锁\n    selectGirdUniqueId: number = -1;\n\n    // 格子宽度\n    gridsWidth: number = 84;\n\n    // 下一排信息\n    public nextGridInfo: any[] = [];\n\n    // 钻石的层级间隔\n    public diamondInterval: number = 10;\n\n    // 历史最高分\n    public scoreRecord: number = 0;\n\n    constructor() {\n        super();\n    }\n\n    parseData(data: any): void {\n        super.parseData(data);\n\n        this.gameInfo = data.gameInfo;\n        this.gridInfo = data.gridInfo || [\n            [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],\n            [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],\n            [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],\n            [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],\n            [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],\n            [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],\n            [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],\n            [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0]],\n            [[0, 0, 0], [0, 0, 0], [0, 0, 0], [0, 0, 0], [2, 1, 1], [2, 1, 1], [0, 0, 0], [0, 0, 0]],\n            [[1, 1, 2], [1, 1, 3], [1, 1, 4], [1, 1, 5], [1, 1, 6], [1, 1, 7], [0, 0, 0], [0, 0, 0]],\n        ];\n        this.scoreRecord = data.scoreRecord || 0;\n\n        this.produce();\n    }\n\n    // 生产格子，服务器逻辑 返回格式为[gridsize][contentType][uniqueId][]\n    produce(): number[][] {\n\n        // 确定要生成的数字组合 nMax <= 7;\n        const arr = [];\n        let hasProducedDiamond: boolean = false;\n        do {\n            // 生成新格子\n            let newNum = NewUtils.randomIntInclusive(0, 10);\n            if (newNum >= 0 && newNum < 4) {\n                newNum = 0;\n            } else if (newNum >= 4 && newNum < 6) {\n                newNum = 1;\n            } else if (newNum >= 6 && newNum < 8) {\n                newNum = 2;\n            } else if (newNum >= 8 && newNum < 10) {\n                newNum = 3;\n            } else if (newNum === 10) {\n                newNum = 4;\n            }\n\n            if (newNum === 0) {\n                arr.push([0, 0, 0]);\n            } else {\n                // 判断剩余空间是否有空格子区域\n                const surSpace = 8 - arr.length;\n                const emptyGrid = arr.filter(x => {\n                    return x && x[1] === gridContentType.EMPTY;\n                })\n                if (surSpace <= newNum && emptyGrid.length === 0) {\n                    for (let i = 0; i < surSpace; i++) {\n                        arr.push([0, 0, 0]);\n                    }\n                    break;\n                }\n\n                // 空间足够，那就将对应数量的格子进行填充\n                const contentType = this.getContentType(hasProducedDiamond);\n                if (contentType === gridContentType.DIAMOND) {\n                    hasProducedDiamond = true;\n                }\n                if (surSpace >= newNum) {\n                    this.gameInfo.uniqueId++;\n                    for (let i = 0; i < newNum; i++) {\n                        arr.push([newNum, contentType, this.gameInfo.uniqueId]);\n                    }\n                }\n            }\n\n        } while (arr.length < 8);\n\n        this.nextGridInfo = arr;\n        this.diamondInterval++;\n        console.log('produce', arr);\n        return arr;\n\n        // const a = [[2, 1, 10], [2, 1, 10], [2, 1, 11], [2, 1, 11], [2, 1, 12], [2, 1, 12], [2, 1, 13], [2, 1, 13]];\n        // return a;\n    }\n\n    // 获得随机生成格子的类型\n    getContentType(hasProducedDiamond: boolean): gridContentType {\n        if (hasProducedDiamond) return gridContentType.NORMAL;\n\n        // 生成订单道具的权重是19，普通格子权重是80，钻石权重是（5 + 层级间隔）\n        const randomNum = NewUtils.randomIntInclusive(1, 100);\n        if (randomNum <= 5) {\n            // 钻石\n            const contnetType = this.diamondInterval > 50 ? gridContentType.DIAMOND : gridContentType.NORMAL;\n            if (contnetType === gridContentType.DIAMOND) this.diamondInterval = 0;\n            return contnetType;\n        } else if (randomNum <= 19) {\n            // 订单道具 60%是当前订单中相关的物品，40%是其他种类格子\n            const orderGoodsIds = orderModule.getAllGoodsId();\n            const contentType = this.getRandomNumberWithWeights(orderGoodsIds);\n            return contentType;\n        } else {\n            // 普通格子\n            return gridContentType.NORMAL;\n        }\n    }\n\n    getRandomNumberWithWeights(excludedNumbers) {\n        // 创建一个包含7到25的数组\n        const allNumbers = Array.from({ length: 19 }, (_, i) => i + 7);\n\n        // 创建一个包含所有数字及其权重的对象数组\n        const weightedNumbers = [];\n\n        // 遍历所有数字，设置参数数组中的数字权重为60，其他为40\n        allNumbers.forEach(number => {\n            const weight = excludedNumbers.includes(number) ? 60 : 40;\n            // 将每个数字根据其权重添加到数组中多次\n            for (let i = 0; i < weight; i++) {\n                weightedNumbers.push(number);\n            }\n        });\n\n        // 从带有权重的数组中随机选择一个数字\n        const randomIndex = Math.floor(Math.random() * weightedNumbers.length);\n        return weightedNumbers[randomIndex];\n    }\n\n    // 检查游戏是否结束\n    checkGameOver(): boolean {\n        let isGameOver = false;\n        for (let col = 0; col < this.gridInfo[0].length; col++) {\n            if (this.gridInfo[0][col][1] !== gridContentType.EMPTY) {\n                isGameOver = true;\n            }\n        }\n        return isGameOver;\n    }\n\n    // 将新格子的数据返回\n    copyNewGridData(): number[][] {\n        const newGridInfo = [];\n        for (let i = 0; i < this.nextGridInfo.length; i++) {\n            const gridInfo = [0, 0, 0];\n            gridInfo[0] = this.nextGridInfo[i][0];\n            gridInfo[1] = this.nextGridInfo[i][1];\n            gridInfo[2] = this.nextGridInfo[i][2];\n            newGridInfo.push(gridInfo);\n        }\n        return newGridInfo;\n    }\n}\nexport const zyxGameModule = new ZyxGameModule();\n"]}