{"version":3,"sources":["assets/script/merge/zyxGame/ZyxGridCom.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mDAAiE;AACjE,6CAAwC;AAElC,IAAA,KAAwB,EAAE,CAAC,UAAU,EAAnC,OAAO,aAAA,EAAE,QAAQ,cAAkB,CAAC;AAE5C,OAAO;AAEP;IAAwC,8BAAY;IAApD;QAAA,qEAyDC;QAtDG,iBAAW,GAAY,IAAI,CAAC;QAG5B,YAAM,GAAc,IAAI,CAAC;QAEjB,UAAI,GAAa,qBAAQ,CAAC,GAAG,CAAC;QAC9B,iBAAW,GAAoB,4BAAe,CAAC,KAAK,CAAC;QACtD,cAAQ,GAAW,CAAC,CAAC;QAEpB,SAAG,GAAW,CAAC,CAAC,CAAC;QACjB,SAAG,GAAW,CAAC,CAAC,CAAC;;IA4C7B,CAAC;IA1CG,2BAAM,GAAN,cAAW,CAAC;IAEZ,0BAAK,GAAL,cAAU,CAAC;IAEX,yBAAI,GAAJ,UAAK,IAAyC;QAC1C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACtC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QAChD,IAAI,CAAC,WAAW,CAAC,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QAEhD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QACpB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QAC3B,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;QAExB,IAAI,IAAI,CAAC,WAAW,KAAK,4BAAe,CAAC,KAAK,EAAE;YAC5C,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;YACzB,OAAO;SACV;QAED,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,KAAK,4BAAe,CAAC,OAAO,CAAC;QAEvE,IAAM,OAAO,GAAG,uBAAqB,kBAAQ,CAAC,kBAAkB,CAAC,CAAC,EAAE,EAAE,CAAG,CAAC;QAC1E,kBAAQ,CAAC,mBAAmB,CAAC,IAAI,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IACvD,CAAC;IAED,8BAAS,GAAT,UAAU,GAAW,EAAE,GAAW;QAC9B,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;IACnB,CAAC;IAED,2BAAM,GAAN;QACI,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;IAClB,CAAC;IAED,KAAK;IACL,8BAAS,GAAT;QAAA,iBAOC;QANG,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC;aACd,EAAE,CAAC,GAAG,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC;aACvB,IAAI,CAAC;YACF,KAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC;QACjC,CAAC,CAAC;aACD,KAAK,EAAE,CAAC;IACjB,CAAC;IArDD;QADC,QAAQ,CAAC,EAAE,CAAC,IAAI,CAAC;mDACU;IAG5B;QADC,QAAQ,CAAC,EAAE,CAAC,MAAM,CAAC;8CACK;IANR,UAAU;QAD9B,OAAO;OACa,UAAU,CAyD9B;IAAD,iBAAC;CAzDD,AAyDC,CAzDuC,EAAE,CAAC,SAAS,GAyDnD;kBAzDoB,UAAU","file":"","sourceRoot":"/","sourcesContent":["import { gridContentType, gridSize } from \"../define/TypeDefine\";\nimport NewUtils from \"../util/NewUtils\";\n\nconst { ccclass, property } = cc._decorator;\n\n// 格子组件\n@ccclass\nexport default class ZyxGridCom extends cc.Component {\n\n    @property(cc.Node)\n    uImgDiamond: cc.Node = null;\n\n    @property(cc.Sprite)\n    uImgBg: cc.Sprite = null;\n\n    private size: gridSize = gridSize.ONE;\n    private contentType: gridContentType = gridContentType.EMPTY;\n    public uniqueId: number = 0;\n\n    private row: number = -1;\n    private col: number = -1;\n\n    onLoad() { }\n\n    start() { }\n\n    init(info: [gridSize, gridContentType, number]) {\n        this.uImgBg.node.width = 84 * info[0];\n        this.uImgBg.node.x = this.uImgBg.node.width / 2;\n        this.uImgDiamond.x = this.uImgBg.node.width / 2;\n\n        this.size = info[0];\n        this.contentType = info[1];\n        this.uniqueId = info[2];\n\n        if (this.contentType === gridContentType.EMPTY) {\n            this.node.active = false;\n            return;\n        }\n\n        this.uImgDiamond.active = this.contentType === gridContentType.DIAMOND;\n\n        const skinUrl = `images/grid/color_${NewUtils.randomIntInclusive(1, 13)}`;\n        NewUtils.setSpriteFrameByUrl(this.uImgBg, skinUrl);\n    }\n\n    setRowCel(row: number, col: number) {\n        this.row = row;\n        this.col = col;\n    }\n\n    moveUp() {\n        this.col -= 1;\n    }\n\n    // 删除\n    eliminate(): void {\n        cc.tween(this.node)\n            .to(0.3, { opacity: 0 })\n            .call(() => {\n                this.node.removeFromParent();\n            })\n            .start();\n    }\n}\n"]}